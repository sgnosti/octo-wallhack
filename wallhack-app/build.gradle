buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.owasp:dependency-check-gradle:3.2.1"
    }
}

plugins {
    id "java"
    id "idea"
    id "org.springframework.boot" version "2.0.3.RELEASE"
    id "io.spring.dependency-management" version "1.0.5.RELEASE"
    id "io.franzbecker.gradle-lombok" version "1.14"
    id "com.github.spotbugs" version "1.6.3"
    id "com.github.sherter.google-java-format" version "0.7.1"
}

ext {
    junitVersion = "5.2.0"
    jdependVersion = "2.9.1"
    awaitilityVersion = "3.1.2"
    jvmArgumentModuleSystemCompatibility = "--add-opens=java.base/java.lang=ALL-UNNAMED"
    swaggerVersion = "3.0.0-SNAPSHOT"
}

repositories {
    mavenCentral()
    maven {
        url "http://oss.jfrog.org/artifactory/oss-snapshot-local/"
    }
}

apply plugin: "org.owasp.dependencycheck"

lombok {
    version = "1.18.2"
    sha256 = ""
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-webflux"
    implementation "org.springframework.boot:spring-boot-devtools"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.javamoney:moneta:1.3"
    implementation "org.zalando:jackson-datatype-money:1.0.2"
    implementation "io.springfox:springfox-swagger2:${swaggerVersion}"
    implementation "io.springfox:springfox-swagger-ui:${swaggerVersion}"
    implementation "io.springfox:springfox-spring-webflux:${swaggerVersion}"
//    implementation "io.springfox:springfox-data-rest:2.9.2"
//    implementation "io.springfox:springfox-bean-validators:2.9.2"

    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude module: "junit" // Spring comes with JUnit 4, we're going to use JUnit 5...
    }
    testImplementation "io.projectreactor:reactor-test"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:2.21.0"
    testImplementation "jdepend:jdepend:${jdependVersion}"
    testImplementation "io.rest-assured:rest-assured:3.1.0"
    testImplementation "org.json:json:20180130"
    testImplementation "com.google.guava:guava:26.0-jre"
    testImplementation "org.awaitility:awaitility:${awaitilityVersion}"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}

group = "de.sgnosti.wallhack"
version = "0.0.1-SNAPSHOT"
sourceCompatibility = 10
targetCompatibility = 10

// Avoid warning regarding illegal reflective access operation...
// required until Spring is fully compatible with Java 9+ module
// system!
tasks.withType(JavaExec) {
    jvmArgs "${jvmArgumentModuleSystemCompatibility}"
}
tasks.withType(Test) {
    jvmArgs "${jvmArgumentModuleSystemCompatibility}"
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

// Let's be more informative when running tests
import org.gradle.internal.logging.text.StyledTextOutputFactory

import static org.gradle.internal.logging.text.StyledTextOutput.Style

tasks.withType(Test) {
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
    }

    def out = services.get(StyledTextOutputFactory).create("testResults")

    afterSuite { desc, result ->
        if (!desc.parent) {
            out.withStyle(Style.Header).println("Result: ${result.resultType} (Total ${result.testCount} tests)")
            out.withStyle(Style.Success).println("        ${result.successfulTestCount} successes")
            out.withStyle(Style.Failure).println("        ${result.failedTestCount} failures")
            out.withStyle(Style.Info).println("        ${result.skippedTestCount} skipped")
        }
    }
}

// Define unit test task
test {
    useJUnitPlatform() {
        excludeTags "integration", "journey"
    }

    reports.html.enabled = false
}

dependencyCheck {
    analyzers {
        assemblyEnabled = false
        experimentalEnabled = false
    }
}

// Define integration test task
task integrationTest(type: Test) {
    description = "Runs the integration tests."
    group = "verification"

    mustRunAfter test

    useJUnitPlatform() {
        includeTags "integration"
    }

    reports.html.enabled = false
}

task journeyTest(type: Test) {
    description = "Runs the API journey tests."
    group = "verification"

    useJUnitPlatform() {
        includeTags "journey"
    }
}

// Make sure `check` task calls integration test
check.dependsOn integrationTest

// Merge test reports
task mergeTestReports(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")

    // These must point to the binary test results directory generated by a Test task instance...
    reportOn files("$buildDir/test-results/test/binary", "$buildDir/test-results/integrationTest/binary")
}
integrationTest.finalizedBy mergeTestReports

task copyNativeDeps(type: Copy) {
    from(configurations.testCompileClasspath) {
        include "*.dylib"
        include "*.so"
        include "*.dll"
    }
    into "build/libs"
}
test.dependsOn copyNativeDeps
